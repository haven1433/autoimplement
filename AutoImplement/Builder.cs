using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace AutoImplement {
   public abstract class Builder {
      private const int OneLevelOfIndentation = 4;

      private readonly StringBuilder builder = new StringBuilder();

      private int indent;

      protected virtual string ClassNamePrefix { get; } = string.Empty;

      protected virtual string ClassNamePostfix { get; } = string.Empty;

      public string GenerateImplementation(Type type, string baseclass, string additionalUsings) {
         builder.Clear();
         var partialClassName = type.CreateCsName(type.Namespace).Substring(1);
         var genericInformation = partialClassName.Contains("<") ? "<" + partialClassName.Split('<')[1] : string.Empty;
         partialClassName = partialClassName.Split('<')[0];

         AppendLine($"// this type was generated by AutoImplement");
         foreach (var import in additionalUsings.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries)) {
            AppendLine($"using {import};");
         }
         AppendLine(string.Empty);

         AppendLine($"namespace {type.Namespace}");
         using (Indent()) {
            AppendLine($"public class {ClassNamePrefix}{partialClassName}{ClassNamePostfix}{genericInformation} : {baseclass} I{partialClassName}{genericInformation}");
            using (Indent()) {
               IncludeExtraMembers(type);
               foreach (var member in FindAllMembers(type)) {
                  var metadata = new MemberMetadata(member);
                  if (member.MemberType == MemberTypes.Event) {
                     AppendEvent((EventInfo)member, metadata);
                  } else if (member.MemberType == MemberTypes.Method) {
                     var methodInfo = (MethodInfo)member;
                     if (methodInfo.IsSpecialName) continue;
                     AppendMethod(methodInfo, metadata);
                  } else if (member.MemberType == MemberTypes.Property) {
                     var propertyInfo = (PropertyInfo)member;
                     if (propertyInfo.Name == "Item" && propertyInfo.GetIndexParameters().Length != 0) {
                        AppendItemProperty(propertyInfo, metadata);
                     } else {
                        AppendProperty(propertyInfo, metadata);
                     }
                  } else {
                     throw new NotImplementedException($"AutoImplement has no way to implement a {member.MemberType} member.");
                  }
               }
            }
         }

         return builder.ToString();
      }

      protected void AppendLine(string content) {
         foreach (var line in content.TrimStart().Split(new[] { Environment.NewLine }, StringSplitOptions.None)) {
            builder.AppendLine(new string(' ', indent) + line);
         }
      }

      protected IDisposable Indent() => new IndentationScope(this);

      protected virtual void IncludeExtraMembers(Type type) { }

      protected abstract void AppendMethod(MethodInfo info, MemberMetadata metadata);

      protected abstract void AppendProperty(PropertyInfo info, MemberMetadata metadata);

      protected abstract void AppendItemProperty(PropertyInfo info, MemberMetadata metadata);

      protected abstract void AppendEvent(EventInfo info, MemberMetadata metadata);

      protected void AssignDefaultValuesToOutParameters(MethodInfo info) {
         foreach (var p in info.GetParameters().Where(p => p.IsOut)) {
            AppendLine($"{p.Name} = default({p.ParameterType.CreateCsName(info.DeclaringType.Namespace)});");
         }
      }

      private static IList<MemberInfo> FindAllMembers(Type baseType) {
         var list = new List<MemberInfo>(baseType.GetMembers());
         list.AddRange(baseType.GetInterfaces().SelectMany(FindAllMembers).Distinct());
         return list;
      }

      private class IndentationScope : IDisposable {
         private readonly Builder parent;

         public IndentationScope(Builder builder) {
            parent = builder;
            parent.AppendLine("{");
            parent.indent += OneLevelOfIndentation;
         }

         public void Dispose() {
            parent.indent -= OneLevelOfIndentation;
            parent.AppendLine("}");
         }
      }
   }
}
